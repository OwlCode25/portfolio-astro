---
import ContactLayout from "../layouts/ContactLayout.astro";
import { Resend } from "resend"
const resend = new Resend("re_gzUgRpAy_Eykt9syN4J8DF4audH8WY2mv")

const RECAPTCHA_SITE_KEY = "6LfjUUIrAAAAAMW53iOxwl7MxmfPVH7bLD9qxjmv"; 
const RECAPTCHA_SECRET_KEY = import.meta.env.RECAPTCHA_SECRET_KEY;

if (Astro.request.method === 'POST'){
  try{
    const dataform = await Astro.request.formData()
    const name = dataform.get('name')
    const email = dataform.get('email')
    const message = dataform.get('message')
    const recaptchaToken = dataform.get('g-recaptcha-response')

    const recaptchaVerifyUrl = 'https://www.google.com/recaptcha/api/siteverify';
    const recaptchaVerifyData = new URLSearchParams({
      secret: RECAPTCHA_SECRET_KEY,
      response: recaptchaToken
    });

    const recaptchaResponse = await fetch(recaptchaVerifyUrl, {
      method: 'POST',
      body: recaptchaVerifyData,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      }
    });
    
    const recaptchaResult = await recaptchaResponse.json();

    if (recaptchaResult.success && recaptchaResult.score >= 0.5) { // El umbral de 0.5 es ajustable
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return Astro.redirect('/contact?error=email');
      }

      if (!name || !message || name.trim() === '' || message.trim() === '') {
        return Astro.redirect('/contact?error=empty');
      }

      const { data, error } = await resend.emails.send({
        from: 'onboarding@resend.dev',
        to: 'g.astudilloc1@gmail.com',
        subject: `¡Nuevo mensaje de ${name} desde tu portafolio!`,
        html: `<strong>${name} - ${email}<br /> ${message} </strong>`
      });

      if (error) {
        console.log(error);
        return Astro.redirect('/contact?error=send');
      }

      return Astro.redirect('/success');
    } else {
      return Astro.redirect('/contact?error=captcha');
    }
  } catch (error) {
    console.error(error);
    return Astro.redirect('/contact?error=unknown');
  }
}

// Determinar si hay errores en la URL
const url = new URL(Astro.request.url);
const errorParam = url.searchParams.get('error');
let errorMessage = '';

if (errorParam === 'email') {
  errorMessage = 'Por favor, introduce un correo electrónico válido.';
} else if (errorParam === 'empty') {
  errorMessage = 'Por favor, completa todos los campos.';
} else if (errorParam === 'captcha') {
  errorMessage = 'La verificación de seguridad ha fallado. Por favor, inténtalo de nuevo.';
} else if (errorParam === 'send') {
  errorMessage = 'Ha ocurrido un error al enviar el mensaje. Por favor, inténtalo de nuevo más tarde.';
} else if (errorParam === 'unknown') {
  errorMessage = 'Ha ocurrido un error desconocido. Por favor, inténtalo de nuevo más tarde.';
}
---

<ContactLayout title="OwlCode - Contacto">
<div class="mx-auto mt-16 mb-20">
  <h3 class="text-2xl uppercase text-white text-center font-bold">¡Muchas gracias por contactar conmigo!</h3>
  <h3 class="text-2xl uppercase text-white text-center font-bold">¿Cómo podría ayudarte?</h3>
</div>

{errorMessage && (
  <div class="w-max mx-auto mb-6 bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded" role="alert">
    <p>{errorMessage}</p>
  </div>
)}

<form class="w-max mx-auto border border-amber-50 p-8" method="POST" id="contact-form">
  <div class="grid md:grid-cols-2 md:gap-6">
    <div class="relative z-0 w-full mb-5 group">
      <label for="website-admin" class="block mb-2 text-sm font-medium text-gray-100 dark:text-white">Nombre</label>
      <div class="flex">
        <span class="inline-flex items-center px-3 text-sm text-gray-100 bg-gray-50 border border-e-0 border-gray-300 rounded-s-md dark:bg-gray-600 dark:text-gray-400 dark:border-gray-600">
          <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 0a10 10 0 1 0 10 10A10.011 10.011 0 0 0 10 0Zm0 5a3 3 0 1 1 0 6 3 3 0 0 1 0-6Zm0 13a8.949 8.949 0 0 1-4.951-1.488A3.987 3.987 0 0 1 9 13h2a3.987 3.987 0 0 1 3.951 3.512A8.949 8.949 0 0 1 10 18Z"/>
          </svg>
        </span>
        <input type="text" name="name" id="website-admin" class="rounded-none rounded-e-lg bg-gray-50 border border-gray-300 text-gray-900 focus:ring-blue-500 focus:border-blue-500 block flex-1 min-w-0 w-full text-sm p-2.5" placeholder="Nombre Apellido" required>
      </div>
    </div>
    <div class="relative z-0 w-full mb-5 group">
      <label for="email-address-icon" class="block mb-2 text-sm font-medium text-gray-100 dark:text-white">Correo</label>
      <div class="relative">
        <div class="absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none">
          <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 16">
            <path d="m10.036 8.278 9.258-7.79A1.979 1.979 0 0 0 18 0H2A1.987 1.987 0 0 0 .641.541l9.395 7.737Z"/>
            <path d="M11.241 9.817c-.36.275-.801.425-1.255.427-.428 0-.845-.138-1.187-.395L0 2.6V14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2.5l-8.759 7.317Z"/>
          </svg>
        </div>
        <input type="email" name="email" id="email-address-icon" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full ps-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="nombre@correo.com" required>
      </div>
    </div>
  </div>
  <div class="flex flex-col">
    <label for="message" class="block mb-2 text-sm font-medium text-gray-100 dark:text-white">Mensaje</label>
    <textarea id="message" rows="4" name="message" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Escribeme un mensaje..." required></textarea>
  </div>
  
  <input type="hidden" name="g-recaptcha-response" id="g-recaptcha-response">
  
  <div class="flex justify-center mt-10">
    <button type="submit" id="submit-btn" class="text-white flex bg-gradient-to-r from-cyan-700 to-blue-700 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-cyan-300 dark:focus:ring-cyan-800 font-medium rounded-full text-sm px-5 py-2.5 text-center me-2 mb-2">
      <svg xmlns="http://www.w3.org/2000/svg" class="mr-2" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-send">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
        <path d="M10 14l11 -11" />
        <path d="M21 3l-6.5 18a.55 .55 0 0 1 -1 0l-3.5 -7l-7 -3.5a.55 .55 0 0 1 0 -1l18 -6.5" />
      </svg>
      Enviar
    </button>
  </div>
</form>

<!-- Badge de reCAPTCHA (obligatorio según términos de servicio) -->
<div class="text-center text-gray-300 text-xs mt-4">
  Este sitio está protegido por reCAPTCHA y aplican la 
  <a href="https://policies.google.com/privacy" class="text-blue-300 hover:text-blue-400" target="_blank">Política de Privacidad</a> y los 
  <a href="https://policies.google.com/terms" class="text-blue-300 hover:text-blue-400" target="_blank">Términos de Servicio</a> de Google.
</div>

<!-- Script para cargar reCAPTCHA -->
<script is:inline define:vars={{ siteKey: RECAPTCHA_SITE_KEY }}>
  // Primero cargamos el script de reCAPTCHA
  const loadRecaptchaScript = () => {
    const script = document.createElement('script');
    script.src = `https://www.google.com/recaptcha/api.js?render=${siteKey}`;
    script.async = true;
    script.defer = true;
    document.head.appendChild(script);
    
    return new Promise((resolve) => {
      script.onload = resolve;
    });
  };
  
  // Función para ejecutar reCAPTCHA
  const executeRecaptcha = async () => {
    return new Promise((resolve) => {
      grecaptcha.ready(() => {
        grecaptcha.execute(siteKey, {action: 'submit'})
          .then(token => {
            resolve(token);
          });
      });
    });
  };
  
  // Inicialización y manejo del formulario
  document.addEventListener('DOMContentLoaded', async () => {
    // Cargamos el script de reCAPTCHA
    await loadRecaptchaScript();
    
    const form = document.getElementById('contact-form');
    const recaptchaInput = document.getElementById('g-recaptcha-response');
    
    form.addEventListener('submit', async (event) => {
      event.preventDefault();
      
      try {
        // Solicitamos un nuevo token justo antes de enviar
        const token = await executeRecaptcha();
        recaptchaInput.value = token;
        
        // Enviamos el formulario
        form.submit();
      } catch (error) {
        console.error('Error al ejecutar reCAPTCHA:', error);
      }
    });
  });
</script>
</ContactLayout>
